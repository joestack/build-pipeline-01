name: Build and Tag Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 #  v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: trial3i8n2w.jfrog.io/petclinic-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
       
      # - name: Run Xray Scan
      #   env:
      #     IMAGE_NAME: trial3i8n2w.jfrog.io/petclinic-docker/jfrog-docker-example-image:${{ github.run_number }}
      #   run: |
      #     # Ausführlicher Scan mit JSON-Output
      #     jf docker scan $IMAGE_NAME \
      #       --format json \
      #       --fail-build \
      #       --min-severity high \
      #       --output scan-results.json
    
      #     # Archivierung der Scan-Ergebnisse
      #     if [ -f scan-results.json ]; then
      #       echo "Scan results are stored under scan-results.json"
      #     fi




      - name: Publish Build Info
        env:
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
        run: |
          # Sammeln aller relevanten Build-Informationen
          jf rt build-add-git
          jf rt build-collect-env
          jf rt build-publish


          # Veröffentlichen mit erweiterten Metadaten
          #jf rt build-publish \
          #  --build-name=$JFROG_CLI_BUILD_NAME \
          #  --build-number=$JFROG_CLI_BUILD_NUMBER \
          #  --project=docker-example

      - name: Scan Docker Image
        env:
          IMAGE_NAME: trial3i8n2w.jfrog.io/petclinic-docker/jfrog-docker-example-image:${{ github.run_number }}
        run: |
          # Führe Xray Scan durch und speichere Ergebnisse als JSON
          jf docker scan $IMAGE_NAME --format=json > xray-results.json
      
      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: xray-scan-results
          path: xray-results.json

      # - name: Generate Scan Report
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const results = JSON.parse(fs.readFileSync('xray-results.json', 'utf8'));
            
      #       let summary = `## JFrog Xray Scan Ergebnisse\n\n`;
      #       summary += `### Gefundene Schwachstellen:\n`;
      #       summary += `- Kritisch: ${results.summary.critical || 0}\n`;
      #       summary += `- Hoch: ${results.summary.high || 0}\n`;
      #       summary += `- Mittel: ${results.summary.medium || 0}\n`;
      #       summary += `- Niedrig: ${results.summary.low || 0}\n\n`;
            
      #       if (results.vulnerabilities) {
      #         summary += `### Details:\n`;
      #         results.vulnerabilities.forEach(vuln => {
      #           summary += `- **${vuln.severity}**: ${vuln.id} - ${vuln.description}\n`;
      #         });
      #       }
            
      #       await github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: summary
      #       });